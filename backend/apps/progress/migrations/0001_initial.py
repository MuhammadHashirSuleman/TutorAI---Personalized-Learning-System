# Generated by Django 4.2.7 on 2025-09-07 06:19

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('courses', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='ClassEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending Approval'), ('active', 'Active'), ('completed', 'Completed'), ('dropped', 'Dropped'), ('suspended', 'Suspended')], default='active', max_length=20)),
                ('enrolled_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('overall_grade', models.CharField(blank=True, max_length=2)),
                ('total_assignments', models.IntegerField(default=0)),
                ('completed_assignments', models.IntegerField(default=0)),
                ('average_score', models.FloatField(default=0.0)),
                ('attendance_rate', models.FloatField(default=100.0)),
                ('participation_score', models.FloatField(default=0.0)),
                ('last_activity', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'class_enrollments',
            },
        ),
        migrations.CreateModel(
            name='StudentProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(choices=[('lesson_start', 'Lesson Started'), ('lesson_complete', 'Lesson Completed'), ('quiz_attempt', 'Quiz Attempted'), ('quiz_complete', 'Quiz Completed'), ('assignment_submit', 'Assignment Submitted'), ('course_enroll', 'Course Enrolled'), ('course_complete', 'Course Completed'), ('video_watch', 'Video Watched'), ('resource_download', 'Resource Downloaded'), ('discussion_post', 'Discussion Post'), ('help_request', 'Help Requested')], max_length=20)),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('review_needed', 'Needs Review'), ('failed', 'Failed - Needs Retry')], default='not_started', max_length=20)),
                ('completion_percentage', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('time_spent', models.IntegerField(default=0, help_text='Time spent in minutes')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('last_accessed', models.DateTimeField(auto_now=True)),
                ('score', models.FloatField(blank=True, help_text='Score achieved (0-100)', null=True)),
                ('attempts', models.IntegerField(default=0)),
                ('best_score', models.FloatField(blank=True, null=True)),
                ('difficulty_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('engagement_level', models.FloatField(default=0.5, help_text='Engagement level 0-1')),
                ('notes', models.TextField(blank=True, help_text='Student or teacher notes')),
                ('metadata', models.JSONField(default=dict, help_text='Additional progress data')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_progress', to='courses.course')),
                ('lesson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_progress', to='courses.lesson')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_progress', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'student_progress',
            },
        ),
        migrations.CreateModel(
            name='QuizResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attempt_number', models.IntegerField(default=1)),
                ('status', models.CharField(choices=[('in_progress', 'In Progress'), ('completed', 'Completed'), ('timed_out', 'Timed Out'), ('submitted', 'Submitted for Review')], default='in_progress', max_length=20)),
                ('score', models.FloatField(default=0.0, help_text='Score achieved (0-100)')),
                ('total_questions', models.IntegerField(default=0)),
                ('correct_answers', models.IntegerField(default=0)),
                ('incorrect_answers', models.IntegerField(default=0)),
                ('skipped_questions', models.IntegerField(default=0)),
                ('time_started', models.DateTimeField(auto_now_add=True)),
                ('time_completed', models.DateTimeField(blank=True, null=True)),
                ('time_taken', models.IntegerField(default=0, help_text='Time taken in seconds')),
                ('answers', models.JSONField(default=dict, help_text="Student's answers to each question")),
                ('question_analytics', models.JSONField(default=dict, help_text='Per-question performance data')),
                ('strengths_identified', models.JSONField(default=list, help_text='Topics student performed well on')),
                ('weaknesses_identified', models.JSONField(default=list, help_text='Topics student struggled with')),
                ('recommendations', models.JSONField(default=list, help_text='AI-generated recommendations')),
                ('average_time_per_question', models.FloatField(default=0.0)),
                ('difficulty_progression', models.JSONField(default=list, help_text='How performance changed with difficulty')),
                ('concept_mastery', models.JSONField(default=dict, help_text='Mastery level for each concept tested')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('progress', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='progress.studentprogress')),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='courses.quiz')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_results', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'quiz_results',
            },
        ),
        migrations.CreateModel(
            name='PerformanceAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('analysis_type', models.CharField(choices=[('weekly', 'Weekly Analysis'), ('monthly', 'Monthly Analysis'), ('course', 'Course Analysis'), ('subject', 'Subject Analysis'), ('comparative', 'Comparative Analysis')], max_length=20)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('overall_score', models.FloatField(default=0.0)),
                ('improvement_rate', models.FloatField(default=0.0, help_text='Rate of improvement over time')),
                ('consistency_score', models.FloatField(default=0.0, help_text='How consistent performance has been')),
                ('strengths', models.JSONField(default=list)),
                ('weaknesses', models.JSONField(default=list)),
                ('recommendations', models.JSONField(default=list)),
                ('predicted_outcomes', models.JSONField(default=dict)),
                ('study_time_total', models.IntegerField(default=0, help_text='Total study time in minutes')),
                ('login_frequency', models.IntegerField(default=0)),
                ('resource_usage', models.JSONField(default=dict)),
                ('class_average', models.FloatField(blank=True, null=True)),
                ('percentile_rank', models.IntegerField(blank=True, null=True)),
                ('learning_style_detected', models.CharField(blank=True, max_length=50)),
                ('difficulty_preferences', models.JSONField(default=dict)),
                ('optimal_study_times', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='courses.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_analytics', to=settings.AUTH_USER_MODEL)),
                ('subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='courses.subject')),
                ('teacher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_analytics', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'performance_analytics',
            },
        ),
        migrations.CreateModel(
            name='LearningGoal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('goal_type', models.CharField(choices=[('skill_mastery', 'Skill Mastery'), ('course_completion', 'Course Completion'), ('grade_improvement', 'Grade Improvement'), ('time_management', 'Time Management'), ('concept_understanding', 'Concept Understanding')], max_length=25)),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('achieved', 'Achieved'), ('overdue', 'Overdue'), ('modified', 'Modified')], default='not_started', max_length=20)),
                ('progress_percentage', models.FloatField(default=0.0)),
                ('target_score', models.FloatField(blank=True, null=True)),
                ('target_completion_date', models.DateField(blank=True, null=True)),
                ('milestones', models.JSONField(default=list, help_text='Key milestones to achieve goal')),
                ('completed_milestones', models.JSONField(default=list)),
                ('suggested_resources', models.JSONField(default=list)),
                ('adaptive_recommendations', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('achieved_at', models.DateTimeField(blank=True, null=True)),
                ('related_courses', models.ManyToManyField(blank=True, to='courses.course')),
                ('related_subjects', models.ManyToManyField(blank=True, to='courses.subject')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_goals', to=settings.AUTH_USER_MODEL)),
                ('teacher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assigned_goals', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'learning_goals',
            },
        ),
        migrations.CreateModel(
            name='ClassRoom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('class_code', models.CharField(help_text='Unique code for students to join', max_length=20, unique=True)),
                ('class_type', models.CharField(choices=[('regular', 'Regular Class'), ('advanced', 'Advanced Class'), ('remedial', 'Remedial Class'), ('honors', 'Honors Class')], default='regular', max_length=20)),
                ('max_students', models.IntegerField(default=30)),
                ('meeting_schedule', models.JSONField(default=dict, help_text='Class meeting schedule')),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('total_assignments', models.IntegerField(default=0)),
                ('average_performance', models.FloatField(default=0.0)),
                ('engagement_score', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('courses', models.ManyToManyField(blank=True, related_name='assigned_classes', to='courses.course')),
                ('students', models.ManyToManyField(related_name='enrolled_classes', through='progress.ClassEnrollment', to=settings.AUTH_USER_MODEL)),
                ('subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='courses.subject')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='taught_classes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'classrooms',
            },
        ),
        migrations.AddField(
            model_name='classenrollment',
            name='classroom',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='progress.classroom'),
        ),
        migrations.AddField(
            model_name='classenrollment',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='studentprogress',
            index=models.Index(fields=['student', 'course'], name='student_pro_student_234af6_idx'),
        ),
        migrations.AddIndex(
            model_name='studentprogress',
            index=models.Index(fields=['activity_type', 'status'], name='student_pro_activit_249fc5_idx'),
        ),
        migrations.AddIndex(
            model_name='studentprogress',
            index=models.Index(fields=['completion_percentage'], name='student_pro_complet_18e9b1_idx'),
        ),
        migrations.AddIndex(
            model_name='studentprogress',
            index=models.Index(fields=['last_accessed'], name='student_pro_last_ac_c74c91_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='studentprogress',
            unique_together={('student', 'course', 'lesson', 'activity_type')},
        ),
        migrations.AddIndex(
            model_name='quizresult',
            index=models.Index(fields=['student', 'quiz'], name='quiz_result_student_7d1a24_idx'),
        ),
        migrations.AddIndex(
            model_name='quizresult',
            index=models.Index(fields=['score'], name='quiz_result_score_46c051_idx'),
        ),
        migrations.AddIndex(
            model_name='quizresult',
            index=models.Index(fields=['created_at'], name='quiz_result_created_97801a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='quizresult',
            unique_together={('student', 'quiz', 'attempt_number')},
        ),
        migrations.AddIndex(
            model_name='performanceanalytics',
            index=models.Index(fields=['student', 'analysis_type'], name='performance_student_8e28c3_idx'),
        ),
        migrations.AddIndex(
            model_name='performanceanalytics',
            index=models.Index(fields=['start_date', 'end_date'], name='performance_start_d_1a6458_idx'),
        ),
        migrations.AddIndex(
            model_name='learninggoal',
            index=models.Index(fields=['student', 'status'], name='learning_go_student_2b111f_idx'),
        ),
        migrations.AddIndex(
            model_name='learninggoal',
            index=models.Index(fields=['target_completion_date'], name='learning_go_target__0798d4_idx'),
        ),
        migrations.AddIndex(
            model_name='classroom',
            index=models.Index(fields=['teacher', 'is_active'], name='classrooms_teacher_f5848e_idx'),
        ),
        migrations.AddIndex(
            model_name='classroom',
            index=models.Index(fields=['class_code'], name='classrooms_class_c_1a053b_idx'),
        ),
        migrations.AddIndex(
            model_name='classenrollment',
            index=models.Index(fields=['student', 'status'], name='class_enrol_student_5929be_idx'),
        ),
        migrations.AddIndex(
            model_name='classenrollment',
            index=models.Index(fields=['classroom', 'status'], name='class_enrol_classro_97a712_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='classenrollment',
            unique_together={('classroom', 'student')},
        ),
    ]
