# Generated by Django 4.2.7 on 2025-09-07 20:41

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('progress', '0002_enrollmentrequest'),
    ]

    operations = [
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('assignment_type', models.CharField(choices=[('quiz', 'Quiz'), ('assignment', 'Assignment'), ('project', 'Project'), ('homework', 'Homework'), ('exam', 'Exam'), ('presentation', 'Presentation')], default='assignment', max_length=20)),
                ('instructions', models.TextField(help_text='Detailed instructions for the assignment')),
                ('attachments', models.JSONField(default=list, help_text='List of file attachments (URLs or file info)')),
                ('resources', models.JSONField(default=list, help_text='Additional resources and references')),
                ('total_points', models.FloatField(default=100.0, help_text='Maximum points for this assignment')),
                ('passing_score', models.FloatField(default=70.0, help_text='Minimum score to pass')),
                ('grading_rubric', models.JSONField(default=dict, help_text='Grading criteria and rubric')),
                ('assigned_date', models.DateTimeField(auto_now_add=True)),
                ('due_date', models.DateTimeField(help_text='Assignment due date')),
                ('late_submission_allowed', models.BooleanField(default=True)),
                ('late_penalty_per_day', models.FloatField(default=5.0, help_text='Points deducted per day for late submission')),
                ('is_active', models.BooleanField(default=True)),
                ('allow_resubmission', models.BooleanField(default=False)),
                ('max_attempts', models.IntegerField(default=1, help_text='Maximum submission attempts (0 = unlimited)')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('visible_to_students', models.BooleanField(default=True)),
                ('publish_results', models.BooleanField(default=True, help_text='Whether to show results to students after grading')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('classroom', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='progress.classroom')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'assignments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TaskSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submission_text', models.TextField(blank=True, help_text='Text-based submission content')),
                ('submission_files', models.JSONField(default=list, help_text='Uploaded files for submission')),
                ('submission_links', models.JSONField(default=list, help_text='External links submitted (e.g., GitHub, Drive)')),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('graded', 'Graded'), ('returned', 'Returned for Revision'), ('late', 'Late Submission')], default='submitted', max_length=20)),
                ('attempt_number', models.IntegerField(default=1)),
                ('is_late', models.BooleanField(default=False)),
                ('score', models.FloatField(blank=True, help_text='Score awarded (0 to assignment.total_points)', null=True)),
                ('percentage_score', models.FloatField(blank=True, help_text='Score as percentage', null=True)),
                ('grade_letter', models.CharField(blank=True, help_text='Letter grade (A, B, C, etc.)', max_length=2)),
                ('teacher_feedback', models.TextField(blank=True, help_text="Teacher's feedback on submission")),
                ('private_notes', models.TextField(blank=True, help_text='Private notes for teacher')),
                ('rubric_scores', models.JSONField(default=dict, help_text='Scores for each rubric criteria')),
                ('graded_at', models.DateTimeField(blank=True, null=True)),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='progress.assignment')),
                ('graded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='graded_submissions', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_submissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'task_submissions',
                'ordering': ['-submitted_at'],
                'indexes': [models.Index(fields=['assignment', 'student'], name='task_submis_assignm_b3f7c7_idx'), models.Index(fields=['status'], name='task_submis_status_729762_idx'), models.Index(fields=['submitted_at'], name='task_submis_submitt_f1c852_idx'), models.Index(fields=['is_late'], name='task_submis_is_late_b4d990_idx')],
                'unique_together': {('assignment', 'student', 'attempt_number')},
            },
        ),
        migrations.AddIndex(
            model_name='assignment',
            index=models.Index(fields=['teacher', 'classroom'], name='assignments_teacher_a98cd4_idx'),
        ),
        migrations.AddIndex(
            model_name='assignment',
            index=models.Index(fields=['due_date'], name='assignments_due_dat_708d3b_idx'),
        ),
        migrations.AddIndex(
            model_name='assignment',
            index=models.Index(fields=['is_active', 'visible_to_students'], name='assignments_is_acti_26dc6a_idx'),
        ),
    ]
