# Generated by Django 4.2.7 on 2025-09-08 17:02

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('chatbot', '__first__'),
        ('users', '0006_teacherprofile_available_for_new_students_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='DailyQuoteAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_assigned', models.DateField(auto_now_add=True)),
                ('viewed', models.BooleanField(default=False)),
                ('viewed_at', models.DateTimeField(blank=True, null=True)),
                ('liked', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'daily_quote_assignments',
            },
        ),
        migrations.CreateModel(
            name='Goal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('goal_type', models.CharField(choices=[('notes', 'Notes Creation'), ('courses', 'Course Completion'), ('quizzes', 'Quiz Performance'), ('study_time', 'Study Time'), ('streak', 'Learning Streak'), ('skills', 'Skill Development'), ('custom', 'Custom Goal')], max_length=20)),
                ('target_value', models.IntegerField(help_text='Target value to achieve')),
                ('current_progress', models.IntegerField(default=0)),
                ('unit', models.CharField(help_text='Unit of measurement (notes, hours, points, etc.)', max_length=50)),
                ('start_date', models.DateTimeField(auto_now_add=True)),
                ('target_date', models.DateTimeField()),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('completed', 'Completed'), ('paused', 'Paused'), ('abandoned', 'Abandoned')], default='active', max_length=20)),
                ('reward_claimed', models.BooleanField(default=False)),
                ('subject_focus', models.CharField(blank=True, max_length=100)),
                ('difficulty_level', models.CharField(default='medium', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'goals',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MilestoneReward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reward_type', models.CharField(choices=[('badge', 'Badge'), ('points', 'Points'), ('certificate', 'Certificate'), ('goal_completion', 'Goal Completion'), ('streak_milestone', 'Streak Milestone'), ('special_achievement', 'Special Achievement')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('icon', models.CharField(default='üèÜ', help_text='Emoji or icon class', max_length=50)),
                ('color', models.CharField(default='#FFD700', help_text='Hex color code', max_length=7)),
                ('points_awarded', models.IntegerField(default=0)),
                ('is_claimed', models.BooleanField(default=False)),
                ('claimed_at', models.DateTimeField(blank=True, null=True)),
                ('is_visible', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('goal', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rewards', to='users.goal')),
            ],
            options={
                'db_table': 'milestone_rewards',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MotivationalQuote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quote_text', models.TextField()),
                ('author', models.CharField(blank=True, max_length=100)),
                ('category', models.CharField(choices=[('general', 'General Motivation'), ('study', 'Study & Learning'), ('perseverance', 'Perseverance'), ('success', 'Success & Achievement'), ('growth', 'Growth Mindset'), ('confidence', 'Confidence Building'), ('focus', 'Focus & Concentration'), ('goals', 'Goal Achievement')], default='general', max_length=20)),
                ('target_weak_subjects', models.JSONField(default=list, help_text='Show when student is weak in these subjects')),
                ('target_low_motivation', models.BooleanField(default=True, help_text='Show when student engagement is low')),
                ('usage_count', models.IntegerField(default=0)),
                ('last_used', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'motivational_quotes',
            },
        ),
        migrations.CreateModel(
            name='SavedChatHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='User-defined title for saved chat', max_length=200)),
                ('messages_content', models.JSONField(help_text='Serialized messages from the chat session')),
                ('subject', models.CharField(blank=True, max_length=100)),
                ('topics_covered', models.JSONField(default=list)),
                ('message_count', models.IntegerField(default=0)),
                ('session_duration', models.IntegerField(default=0, help_text='Duration in seconds')),
                ('tags', models.JSONField(default=list, help_text='User tags for organization')),
                ('is_favorite', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True, help_text='User notes about this chat')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('original_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='saved_versions', to='chatbot.chatsession')),
            ],
            options={
                'db_table': 'saved_chat_history',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='note',
            name='summary',
            field=models.TextField(blank=True, help_text='AI-generated summary'),
        ),
        migrations.AddField(
            model_name='note',
            name='summary_generated_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='user',
            name='role',
            field=models.CharField(choices=[('student', 'Student'), ('admin', 'Admin')], default='student', max_length=20),
        ),
        migrations.DeleteModel(
            name='TeacherProfile',
        ),
        migrations.AddField(
            model_name='savedchathistory',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='saved_chats', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='milestonereward',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rewards', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='goal',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='goals', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='dailyquoteassignment',
            name='quote',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.motivationalquote'),
        ),
        migrations.AddField(
            model_name='dailyquoteassignment',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_quotes', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='dailyquoteassignment',
            unique_together={('user', 'date_assigned')},
        ),
    ]
