# Generated by Django 4.2.7 on 2025-09-07 06:19

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(blank=True, max_length=200, unique=True)),
                ('description', models.TextField()),
                ('short_description', models.CharField(blank=True, max_length=300)),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], default='beginner', max_length=20)),
                ('tags', models.JSONField(default=list, help_text='List of tags for better searchability')),
                ('estimated_hours', models.FloatField(default=1.0, help_text='Estimated completion time in hours')),
                ('lesson_count', models.IntegerField(default=0)),
                ('quiz_count', models.IntegerField(default=0)),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='course_thumbnails/')),
                ('preview_video', models.URLField(blank=True, help_text='YouTube or Vimeo URL')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_free', models.BooleanField(default=True)),
                ('learning_objectives', models.JSONField(default=list, help_text='List of learning objectives')),
                ('prerequisites', models.JSONField(default=list, help_text='List of prerequisite skills/courses')),
                ('target_audience', models.TextField(blank=True)),
                ('enrollment_count', models.IntegerField(default=0)),
                ('completion_count', models.IntegerField(default=0)),
                ('average_rating', models.FloatField(default=0.0)),
                ('total_ratings', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('contributors', models.ManyToManyField(blank=True, related_name='contributed_courses', to=settings.AUTH_USER_MODEL)),
                ('instructor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_courses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'courses',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(blank=True, max_length=200)),
                ('description', models.TextField(blank=True)),
                ('order', models.IntegerField(default=0)),
                ('content_type', models.CharField(choices=[('video', 'Video'), ('text', 'Text/Article'), ('interactive', 'Interactive Content'), ('quiz', 'Quiz'), ('assignment', 'Assignment')], default='text', max_length=20)),
                ('content', models.TextField(help_text='Main lesson content')),
                ('video_url', models.URLField(blank=True)),
                ('video_duration', models.IntegerField(default=0, help_text='Duration in seconds')),
                ('resources', models.JSONField(default=list, help_text='List of additional resources')),
                ('downloadable_files', models.JSONField(default=list, help_text='Files students can download')),
                ('estimated_duration', models.IntegerField(default=15, help_text='Estimated time in minutes')),
                ('difficulty_points', models.IntegerField(default=1, help_text='Difficulty rating 1-10')),
                ('key_concepts', models.JSONField(default=list, help_text='Key concepts covered')),
                ('is_active', models.BooleanField(default=True)),
                ('is_preview', models.BooleanField(default=False, help_text='Can be viewed without enrollment')),
                ('view_count', models.IntegerField(default=0)),
                ('completion_count', models.IntegerField(default=0)),
                ('average_completion_time', models.FloatField(default=0.0, help_text='Average time to complete in minutes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='courses.course')),
            ],
            options={
                'db_table': 'lessons',
                'ordering': ['course', 'order'],
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(blank=True, help_text='FontAwesome icon class', max_length=100)),
                ('color', models.CharField(default='#007bff', help_text='Hex color code', max_length=7)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'subjects',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('quiz_type', models.CharField(choices=[('practice', 'Practice Quiz'), ('assessment', 'Assessment Quiz'), ('final', 'Final Exam'), ('adaptive', 'Adaptive Quiz')], default='practice', max_length=20)),
                ('time_limit', models.IntegerField(blank=True, help_text='Time limit in minutes', null=True)),
                ('max_attempts', models.IntegerField(default=3)),
                ('passing_score', models.IntegerField(default=70, help_text='Minimum score to pass (%)')),
                ('total_questions', models.IntegerField(default=0)),
                ('randomize_questions', models.BooleanField(default=False)),
                ('show_correct_answers', models.BooleanField(default=True)),
                ('adaptive_difficulty', models.BooleanField(default=False, help_text='Adjust difficulty based on performance')),
                ('is_active', models.BooleanField(default=True)),
                ('attempt_count', models.IntegerField(default=0)),
                ('average_score', models.FloatField(default=0.0)),
                ('pass_rate', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quizzes', to='courses.course')),
                ('lesson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='quizzes', to='courses.lesson')),
                ('prerequisite_quizzes', models.ManyToManyField(blank=True, to='courses.quiz')),
            ],
            options={
                'db_table': 'quizzes',
                'ordering': ['course', 'title'],
            },
        ),
        migrations.CreateModel(
            name='CourseRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)])),
                ('review', models.TextField(blank=True)),
                ('content_quality', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], null=True)),
                ('instructor_rating', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], null=True)),
                ('difficulty_rating', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], null=True)),
                ('is_anonymous', models.BooleanField(default=False)),
                ('is_featured', models.BooleanField(default=False)),
                ('helpful_votes', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='courses.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'course_ratings',
            },
        ),
        migrations.CreateModel(
            name='CourseEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('enrolled', 'Enrolled'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('dropped', 'Dropped'), ('paused', 'Paused')], default='enrolled', max_length=20)),
                ('progress_percentage', models.FloatField(default=0.0)),
                ('enrolled_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('last_accessed', models.DateTimeField(blank=True, null=True)),
                ('total_time_spent', models.IntegerField(default=0, help_text='Total time spent in minutes')),
                ('lessons_completed', models.IntegerField(default=0)),
                ('quizzes_completed', models.IntegerField(default=0)),
                ('average_quiz_score', models.FloatField(default=0.0)),
                ('notifications_enabled', models.BooleanField(default=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='courses.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'course_enrollments',
            },
        ),
        migrations.AddField(
            model_name='course',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='courses.subject'),
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('question_type', models.CharField(choices=[('multiple_choice', 'Multiple Choice'), ('true_false', 'True/False'), ('short_answer', 'Short Answer'), ('essay', 'Essay'), ('matching', 'Matching'), ('fill_blank', 'Fill in the Blank')], default='multiple_choice', max_length=20)),
                ('order', models.IntegerField(default=0)),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=10)),
                ('points', models.IntegerField(default=1)),
                ('explanation', models.TextField(blank=True, help_text='Explanation for the correct answer')),
                ('options', models.JSONField(default=dict, help_text='Question options and correct answers')),
                ('tags', models.JSONField(default=list)),
                ('concepts', models.JSONField(default=list, help_text='Concepts this question tests')),
                ('times_asked', models.IntegerField(default=0)),
                ('times_correct', models.IntegerField(default=0)),
                ('average_time', models.FloatField(default=0.0, help_text='Average time to answer in seconds')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='courses.quiz')),
            ],
            options={
                'db_table': 'questions',
                'ordering': ['quiz', 'order'],
                'indexes': [models.Index(fields=['quiz', 'difficulty'], name='questions_quiz_id_2ef78b_idx'), models.Index(fields=['question_type'], name='questions_questio_8af709_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='lesson',
            index=models.Index(fields=['course', 'order'], name='lessons_course__eb1bdb_idx'),
        ),
        migrations.AddIndex(
            model_name='lesson',
            index=models.Index(fields=['content_type'], name='lessons_content_20a3e8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='lesson',
            unique_together={('course', 'order')},
        ),
        migrations.AlterUniqueTogether(
            name='courserating',
            unique_together={('student', 'course')},
        ),
        migrations.AddIndex(
            model_name='courseenrollment',
            index=models.Index(fields=['student', 'status'], name='course_enro_student_8023bd_idx'),
        ),
        migrations.AddIndex(
            model_name='courseenrollment',
            index=models.Index(fields=['course', 'status'], name='course_enro_course__37db5f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='courseenrollment',
            unique_together={('student', 'course')},
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['subject', 'difficulty_level'], name='courses_subject_de8e67_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['status', 'is_active'], name='courses_status_581bd2_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['average_rating'], name='courses_average_f67875_idx'),
        ),
    ]
